defmodule Remembly.Repo.Migrations.CreateMoreGenericMemoryAndRefactor do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:websites, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :url, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :memory_id, :uuid
    end

    alter table(:messages) do
      remove :category_id
      add :memory_id, :uuid
    end

    create table(:memories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:websites) do
      modify :memory_id,
             references(:memories,
               column: :id,
               name: "websites_memory_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:websites, [:url], name: "websites_website_url_index")

    alter table(:messages) do
      modify :memory_id,
             references(:memories,
               column: :id,
               name: "messages_memory_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:memories) do
      add :source, :text, null: false, default: "manual"
      add :content, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :category_id,
          references(:categories,
            column: :id,
            name: "memories_category_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    alter table(:categories) do
      add :parent_id,
          references(:categories,
            column: :id,
            name: "categories_parent_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:categories, "categories_parent_id_fkey")

    alter table(:categories) do
      remove :parent_id
    end

    drop constraint(:memories, "memories_category_id_fkey")

    alter table(:memories) do
      remove :category_id
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :content
      remove :source
    end

    drop constraint(:messages, "messages_memory_id_fkey")

    alter table(:messages) do
      modify :memory_id, :uuid
    end

    drop_if_exists unique_index(:websites, [:url], name: "websites_website_url_index")

    drop constraint(:websites, "websites_memory_id_fkey")

    alter table(:websites) do
      modify :memory_id, :uuid
    end

    drop table(:memories)

    alter table(:messages) do
      remove :memory_id

      add :category_id,
          references(:categories,
            column: :id,
            name: "messages_category_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    drop table(:websites)
  end
end
